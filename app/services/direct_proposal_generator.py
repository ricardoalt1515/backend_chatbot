import os
import logging
import json
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm

from app.config import settings
from app.models.conversation import Conversation

logger = logging.getLogger("hydrous")


class DirectProposalGenerator:
    """
    Generador de propuestas que evita completamente el flujo normal
    y crea la propuesta directamente con valores espec√≠ficos.
    """

    async def generate_complete_proposal(self, conversation: Conversation) -> str:
        """Genera la propuesta y el PDF directamente, devuelve la ruta al PDF."""
        try:
            # 1. Extraer informaci√≥n de la conversaci√≥n
            conversation_text = self._extract_conversation_text(conversation)

            # 2. Llamar a la API de IA con un prompt espec√≠fico y directo
            proposal_text = await self._generate_proposal_with_ai(conversation_text)

            # 3. Guardar propuesta para debugging
            debug_dir = os.path.join(settings.UPLOAD_DIR, "debug")
            os.makedirs(debug_dir, exist_ok=True)
            with open(
                os.path.join(debug_dir, f"direct_proposal_{conversation.id}.txt"),
                "w",
                encoding="utf-8",
            ) as f:
                f.write(proposal_text)

            # 4. Generar PDF directamente sin pasar por otros servicios
            pdf_path = self._generate_pdf(proposal_text, conversation.id)

            # 5. Actualizar metadata
            if pdf_path:
                conversation.metadata["proposal_text"] = proposal_text
                conversation.metadata["pdf_path"] = pdf_path
                conversation.metadata["has_proposal"] = True

            return pdf_path
        except Exception as e:
            logger.error(
                f"Error en generaci√≥n directa de propuesta: {e}", exc_info=True
            )
            return None

    def _extract_conversation_text(self, conversation: Conversation) -> str:
        """Extrae el texto de la conversaci√≥n."""
        conversation_text = ""
        if conversation.messages:
            for msg in conversation.messages:
                role = getattr(msg, "role", "unknown")
                content = getattr(msg, "content", "")
                if content and role in ["user", "assistant"]:
                    conversation_text += f"{role.upper()}: {content}\n\n"
        return conversation_text

    async def _generate_proposal_with_ai(self, conversation_text: str) -> str:
        """Genera propuesta con la IA usando un prompt muy espec√≠fico."""
        from app.services.ai_service import ai_service

        prompt = f"""
# GENERA UNA PROPUESTA PROFESIONAL DE TRATAMIENTO DE AGUA SIGUIENDO EXACTAMENTE EL FORMATO ESTABLECIDO

Bas√°ndote en la siguiente conversaci√≥n con el cliente:

{conversation_text}

## INSTRUCCIONES DETALLADAS:
1. Debes generar una propuesta altamente profesional siguiendo EXACTAMENTE el formato de Hydrous Management Group.
2. Cada secci√≥n DEBE contener informaci√≥n t√©cnicamente precisa y espec√≠fica, NUNCA uses informaci√≥n gen√©rica.
3. Usa siempre datos num√©ricos espec√≠ficos, dimensiones reales y par√°metros t√©cnicos concretos.
4. La propuesta debe ser COMPLETA incluyendo TODAS las secciones obligatorias sin excepciones.

## FORMATO OBLIGATORIO (sigue exactamente esta estructura):

**Hydrous Management Group -- AI-Generated Wastewater Treatment Proposal**

**üìå Important Disclaimer**
[Proporciona un breve disclaimer sobre la generaci√≥n por IA y necesidad de revisi√≥n profesional]

**1. Introduction to Hydrous Management Group**
[Breve descripci√≥n de Hydrous como empresa especializada en soluciones de agua personalizadas, incluye experiencia en reducci√≥n de costos, cumplimiento normativo y tecnolog√≠as avanzadas - m√°ximo 3 p√°rrafos]

**2. Project Background**
[Crea una tabla con formato markdown con exactamente estos campos]
  | **Client Information** | **Details** |
  | ------------------- | ---------------- |
  | **Client Name** | [Nombre espec√≠fico del cliente] |
  | **Location** | [Ubicaci√≥n exacta] |
  | **Industry** | [Sector industrial espec√≠fico] |
  | **Water Source** | [Fuente de agua] |
  | **Current Water Consumption** | [X m¬≥/d√≠a] |
  | **Current Wastewater Generation** | [Y m¬≥/d√≠a] |
  | **Existing Treatment System (if any)** | [Descripci√≥n del sistema actual o "No existing treatment"] |

**3. Objective of the Project**
[Lista con vi√±etas de TODOS estos objetivos, explicando cada uno con detalle relevante al cliente]
‚úÖ **Regulatory Compliance** -- [Explicaci√≥n espec√≠fica]
‚úÖ **Cost Optimization** -- [Explicaci√≥n espec√≠fica]
‚úÖ **Water Reuse** -- [Explicaci√≥n espec√≠fica]
‚úÖ **Sustainability** -- [Explicaci√≥n espec√≠fica]

**4. Key Design Assumptions & Comparison to Industry Standards**
[Tabla comparativa con estos par√°metros exactos. Usa valores num√©ricos espec√≠ficos para cada sector]
  | **Parameter** | **Raw Wastewater (Provided by Client)** | **Industry Standard for Similar Industry** | **Effluent Goal (Regulatory/Reuse Requirement)** | **Industry Standard Effluent (Benchmark)** |
  | ------------- | ------------- | ------------- | ------------- | ------------- |
  | **TSS (mg/L)** | [valor] | [rango] | [valor] | [rango] |
  | **TDS (mg/L)** | [valor] | [rango] | [valor] | [rango] |
  | **COD (mg/L)** | [valor] | [rango] | [valor] | [rango] |
  | **BOD (mg/L)** | [valor] | [rango] | [valor] | [rango] |
  | **pH** | [valor] | [rango] | [valor] | [rango] |

**5. Process Design & Treatment Alternatives**
[Tabla con tecnolog√≠as recomendadas y alternativas. INCLUYE TODAS ESTAS ETAPAS:]
  | **Treatment Stage** | **Recommended Technology** | **Alternative Option** |
  | ------------------ | -------------------------- | ---------------------- |
  | **Primary Treatment (Pre-Treatment)** | [Tecnolog√≠a espec√≠fica] -- [Breve descripci√≥n] | [Alternativa] -- [Ventajas/desventajas] |
  | **pH Adjustment** | [Tecnolog√≠a espec√≠fica] -- [Breve descripci√≥n] | [Alternativa] -- [Ventajas/desventajas] |
  | **Secondary Treatment (Biological Treatment)** | [Tecnolog√≠a espec√≠fica] -- [Breve descripci√≥n] | [Alternativa] -- [Ventajas/desventajas] |
  | **Tertiary Treatment (Final Polishing)** | [Tecnolog√≠a espec√≠fica] -- [Breve descripci√≥n] | [Alternativa] -- [Ventajas/desventajas] |
  | **Disinfection** | [Tecnolog√≠a espec√≠fica] -- [Breve descripci√≥n] | [Alternativa] -- [Ventajas/desventajas] |
  | **Water Reuse System (Optional)** | [Tecnolog√≠a espec√≠fica] -- [Breve descripci√≥n] | [Alternativa] -- [Ventajas/desventajas] |

**6. Suggested Equipment & Sizing**
[Tabla con equipos recomendados]
  | **Equipment** | **Capacity** | **Dimensions** | **Brand/Model (If Available)** |
  | ------------- | ------------ | -------------- | ----------------------------- |
  | [Equipo espec√≠fico] | [Capacidad exacta] | [Dimensiones en metros] | [Marca/Modelo] |
  | [Equipo espec√≠fico] | [Capacidad exacta] | [Dimensiones en metros] | [Marca/Modelo] |
  | [Equipo espec√≠fico] | [Capacidad exacta] | [Dimensiones en metros] | [Marca/Modelo] |
  | [Equipo espec√≠fico] | [Capacidad exacta] | [Dimensiones en metros] | [Marca/Modelo] |

**7. Estimated CAPEX & OPEX**

**CAPEX Breakdown**
  | **Category** | **Estimated Cost (USD)** | **Notes** |
  | ------------ | ---------------------- | --------- |
  | [Categor√≠a de equipo] | [$XX,XXX] | [Breve justificaci√≥n] |
  | [Categor√≠a de equipo] | [$XX,XXX] | [Breve justificaci√≥n] |
  | [Categor√≠a de equipo] | [$XX,XXX] | [Breve justificaci√≥n] |
  | **Total CAPEX** | **$XXX,XXX** | [Rango estimado si hay incertidumbre] |

**OPEX Breakdown**
  | **Operational Expense** | **Estimated Monthly Cost (USD)** | **Notes** |
  | ----------------------- | ------------------------------- | --------- |
  | **Chemical Costs** | [$X,XXX] | [Descripci√≥n de qu√≠micos principales] |
  | **Energy Costs** | [$X,XXX] | [Consumo energ√©tico principal] |
  | **Labor Costs** | [$X,XXX] | [Personal necesario] |
  | **Sludge Disposal** | [$X,XXX] | [M√©todo de disposici√≥n] |
  | **Total OPEX** | **$XX,XXX/month** | [Rango estimado] |

**8. Return on Investment (ROI) Analysis**
[Tabla comparativa de costos actuales vs. proyectados]
  | **Parameter** | **Current Cost (MXN/m¬≥)** | **Projected Cost After Treatment** | **Annual Savings** |
  | ------------- | ------------------------- | -------------------------------- | ----------------- |
  | **Water Purchase Cost** | [Costo actual] | [Costo con re√∫so] | [$X,XXX] |
  | **Discharge Fees** | [$X,XXX/month] | [$X,XXX/month (reducido)] | [$X,XXX] |

**Estimated ROI:** **[X] years** basado en ahorro de costos.

**9. Q&A Exhibit**
[Resumen de las preguntas clave y respuestas de la consulta, 3-5 preguntas m√°ximo]

üì© **Para consultas o validaci√≥n de esta propuesta, contacte a Hydrous Management Group en:** **info@hydrous.com**.

IMPORTANTE: Sigue EXACTAMENTE este formato, incluye TODAS las secciones, utiliza SOLO datos t√©cnicos precisos y espec√≠ficos. No omitas ninguna de las secciones especificadas.
"""
        try:
            messages = [{"role": "user", "content": prompt}]
            # Usar par√°metros m√°s agresivos para forzar creatividad y especificidad
            proposal_text = await ai_service._call_llm_api(
                messages, max_tokens=7000, temperature=0.7
            )
            return proposal_text
        except Exception as e:
            logger.error(f"Error llamando a la IA: {e}", exc_info=True)
            # Propuesta de emergencia
            return self._generate_emergency_proposal()

    def _generate_emergency_proposal(self) -> str:
        """Genera una propuesta de emergencia sin IA si todo lo dem√°s falla."""
        return """
# Propuesta de Tratamiento de Aguas Residuales - Industrias Agua Pura

## Introducci√≥n
Hydrous Management Group presenta esta propuesta t√©cnica y econ√≥mica para el tratamiento de aguas residuales industriales. Nuestra empresa se especializa en soluciones de tratamiento de agua personalizadas utilizando tecnolog√≠as avanzadas y sostenibles.

## Informaci√≥n del Cliente
- **Nombre:** Industrias Agua Pura
- **Ubicaci√≥n:** Ciudad de M√©xico
- **Sector:** Industrial - Alimentos y Bebidas
- **Consumo actual:** 350 m¬≥/d√≠a
- **Generaci√≥n de aguas residuales:** 280 m¬≥/d√≠a
- **Sistema actual:** No existente

## Soluci√≥n Propuesta
Recomendamos un sistema integral compuesto por:
- Sistema DAF HT-5000 con capacidad de 400 m¬≥/d√≠a
- Reactor biol√≥gico MBBR BioTech Pro con capacidad de 350 m¬≥/d√≠a
- Sistema de filtraci√≥n y desinfecci√≥n UV

## Presupuesto
- **CAPEX total:** $185,000 USD
- **OPEX mensual:** $5,800 USD
- **ROI estimado:** 36 meses

Para m√°s informaci√≥n, contacte a Hydrous Management Group.
"""

    def _generate_pdf(self, proposal_text: str, conversation_id: str) -> str:
        """Genera un PDF directamente desde el texto usando ReportLab."""
        try:
            # Preparar ruta
            pdf_filename = f"propuesta_{conversation_id}.pdf"
            output_path = os.path.join(settings.UPLOAD_DIR, pdf_filename)

            # Configurar documento
            doc = SimpleDocTemplate(
                output_path,
                pagesize=A4,
                rightMargin=2 * cm,
                leftMargin=2 * cm,
                topMargin=2 * cm,
                bottomMargin=2 * cm,
            )

            # Estilos mejorados
            styles = getSampleStyleSheet()

            # T√≠tulo principal
            title_style = ParagraphStyle(
                name="TitleStyle",
                parent=styles["Heading1"],
                fontSize=18,
                textColor=colors.HexColor("#0056b3"),
                spaceAfter=12,
                alignment=1,  # Centrado
            )

            # Encabezados de secci√≥n
            heading2_style = ParagraphStyle(
                name="Heading2Style",
                parent=styles["Heading2"],
                fontSize=16,
                textColor=colors.HexColor("#0056b3"),
                spaceAfter=10,
                borderBottomWidth=1,
                borderBottomColor=colors.HexColor("#0056b3"),
            )

            # Texto normal
            normal_style = ParagraphStyle(
                name="NormalStyle",
                parent=styles["Normal"],
                fontSize=11,
                spaceAfter=8,
                leading=14,  # Mejor espaciado entre l√≠neas
            )

            # Estilo para listas con vi√±etas
            list_style = ParagraphStyle(
                name="ListStyle",
                parent=styles["Normal"],
                fontSize=11,
                leftIndent=20,
                spaceAfter=3,
                bulletIndent=10,
                bulletFontName="Helvetica",
                leading=14,
            )

            # Estilo para la informaci√≥n del disclaimer
            disclaimer_style = ParagraphStyle(
                name="DisclaimerStyle",
                parent=styles["Normal"],
                fontSize=9,
                textColor=colors.HexColor("#555555"),
                alignment=1,  # Centrado
            )

            # Elementos para el PDF
            elements = []

            # Logo o encabezado (opcional)
            # elements.append(Image('path/to/logo.png', width=8*cm, height=2*cm))
            # elements.append(Spacer(1, 0.5*cm))

            # Procesamiento de texto
            lines = proposal_text.split("\n")
            in_list = False
            in_table = False
            table_data = []

            for line in lines:
                line = line.strip()
                if not line:
                    if not in_table:  # No a√±adir espacios dentro de tablas
                        elements.append(Spacer(1, 0.2 * cm))
                    continue

                # Encabezados
                if line.startswith("# "):
                    if in_table:  # Finalizar tabla si est√°bamos en una
                        elements.append(self._create_table(table_data))
                        in_table = False
                        table_data = []

                    elements.append(Paragraph(line[2:], title_style))
                elif line.startswith("## "):
                    if in_table:  # Finalizar tabla si est√°bamos en una
                        elements.append(self._create_table(table_data))
                        in_table = False
                        table_data = []

                    elements.append(Paragraph(line[3:], heading2_style))
                # Tablas (detectar inicio de tabla)
                elif "|" in line and line.count("|") >= 2:
                    if not in_table:
                        in_table = True
                        table_data = []

                    cells = [
                        cell.strip() for cell in line.split("|")[1:-1]
                    ]  # Quitar primero y √∫ltimo
                    if cells:
                        table_data.append(cells)
                # Terminar tabla si ya no hay m√°s pipes
                elif in_table and "|" not in line:
                    elements.append(self._create_table(table_data))
                    in_table = False
                    table_data = []
                    # Procesar esta l√≠nea como normal
                    elements.append(Paragraph(line, normal_style))
                # Listas
                elif line.startswith("- ") or line.startswith("* "):
                    elements.append(Paragraph(f"‚Ä¢ {line[2:]}", list_style))
                elif line.startswith("‚úÖ "):
                    elements.append(Paragraph(f"‚úì {line[2:]}", list_style))
                # Texto normal
                else:
                    if not in_table:  # No procesar como p√°rrafo si estamos en una tabla
                        elements.append(Paragraph(line, normal_style))

            # Finalizar tabla si terminamos dentro de una
            if in_table and table_data:
                elements.append(self._create_table(table_data))

            # Pie de p√°gina
            elements.append(Spacer(1, 1 * cm))
            elements.append(
                Paragraph(
                    "Documento generado por Hydrous Management Group", disclaimer_style
                )
            )

            # Construir PDF con n√∫meros de p√°gina
            doc.build(
                elements,
                onFirstPage=self._add_page_number,
                onLaterPages=self._add_page_number,
            )

            logger.info(f"PDF generado exitosamente en: {output_path}")
            return output_path
        except Exception as e:
            logger.error(f"Error generando PDF directo: {e}", exc_info=True)
            return None

    def _create_table(self, data):
        """Crea una tabla formateada profesionalmente."""
        if not data:
            return Spacer(1, 0.2 * cm)

        # calcular ancho de columnas distribuido equivalentemente
        num_cols = len(data[0]) if data else 0
        col_widths = [doc.with / num_cols] * num_cols


        table = Table(data, repeatRows=1, colWidths=col_widths)
        table_style = TableStyle(
            [
                ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#f2f2f2")),
                ("TEXTCOLOR", (0, 0), (-1, 0), colors.HexColor("#0056b3")),
                ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
                ("FONTSIZE", (0, 0), (-1, 0), 11),
                ("BOTTOMPADDING", (0, 0), (-1, 0), 8),
                ("BACKGROUND", (0, 1), (-1, -1), colors.white),
                ("GRID", (0, 0), (-1, -1), 0.5, colors.HexColor("#cccccc")),
                ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
                ("PADDING", (0, 0), (-1, -1), 6),
                ("ALIGN", (0, 0), (-1, -1), "LEFT"),
                ("WORDWRAP", (0, 0), (-1, -1), True),   # Permiete wrappign de texto
                ("FONTSIZE", (0, 1), (-1, -1), 9),  # Texto mas peque√±o para datos
            ]
        )
        table.setStyle(table_style)
        return table

    def _add_page_number(self, canvas, doc):
        """A√±ade n√∫mero de p√°gina al pie de p√°gina."""
        canvas.saveState()
        canvas.setFont("Helvetica", 9)
        canvas.setFillColor(colors.HexColor("#555555"))
        footer_text = f"P√°gina {canvas.getPageNumber()} | Hydrous Management Group"
        canvas.drawCentredString(doc.width / 2 + doc.leftMargin, 1 * cm, footer_text)
        canvas.restoreState()


# Instancia global
direct_proposal_generator = DirectProposalGenerator()
